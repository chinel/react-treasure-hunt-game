[{"C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-treasure-hunt-game\\src\\index.js":"1","C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-treasure-hunt-game\\src\\App.js":"2"},{"size":197,"mtime":1609738360984,"results":"3","hashOfConfig":"4"},{"size":2605,"mtime":1609820913532,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"185veh5",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-treasure-hunt-game\\src\\index.js",[],"C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-treasure-hunt-game\\src\\App.js",["11"],"import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nexport default function App() {\n  const canvasRef = useRef(null);\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n\n  //set the height and width of the canvas\n  //mimics componentDidMount\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.canvas.height = window.innerHeight;\n    context.canvas.width = window.innerWidth;\n  }, []);\n\n  //move the box if x or y changes\n  //mimics componentDidUpdate\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.clearRect(\n      0,\n      0,\n      window.innerWidth,\n      window.innerHeight,\n      window.innerWidth\n    ); //this logic here allows us to be able to move the canvas without drawing  a new one\n    context.fillRect(x, y, 100, 100);\n  }, [x, y]);\n\n  // add event listener to window to listen for arrow keys\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n\n    function handleKeyDown(e) {\n      //console.log(e.keyCode, e);\n      console.log(e.key, e);\n      if (e.key === \"ArrowUp\") setY((y) => y - 20);\n      if (e.key === \"ArrowLeft\") setX((x) => x - 20);\n      if (e.key === \"ArrowDown\") setY((y) => y + 20);\n      if (e.key === \"ArrowRight\") setX((x) => x + 20);\n    }\n\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, []);\n\n  function move(direction) {\n    if (direction === \"up\") setY((y) => y - 20);\n    if (direction === \"left\") setX((x) => x - 20);\n    if (direction === \"down\") setY((y) => y + 20);\n    if (direction === \"right\") setX((x) => x + 20);\n  }\n\n  return (\n    <div className=\"app\">\n      <canvas ref={canvasRef} />\n\n      <div className=\"arrows\">\n        <button\n          onClick={() => {\n            setY((y) => y - 20);\n          }}\n        >\n          Up\n        </button>\n        <button\n          onClick={() => {\n            setX((x) => x - 20);\n          }}\n        >\n          Left\n        </button>\n        <button\n          onClick={() => {\n            setY((y) => y + 20);\n          }}\n        >\n          Down\n        </button>\n        <button\n          onClick={() => {\n            setX((x) => x + 20);\n          }}\n        >\n          Right\n        </button>\n      </div>\n\n      <div className=\"images\">\n        <img src=\"https://i.imgur.com/JYUB0m3.png\" alt=\"Down\" />\n        <img src=\"https://i.imgur.com/GEXD7bk.gif\" alt=\"Right\" />\n        <img src=\"https://i.imgur.com/XSA2Oom.gif\" alt=\"Up\" />\n        <img src=\"https://i.imgur.com/4LGAZ8t.gif\" alt=\"Left\" />\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"12","severity":1,"message":"13","line":47,"column":12,"nodeType":"14","messageId":"15","endLine":47,"endColumn":16},"no-unused-vars","'move' is defined but never used.","Identifier","unusedVar"]